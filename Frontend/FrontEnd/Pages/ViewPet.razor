@page "/view/{category}/"
@layout MainLayout
@inject HttpClient Http
@inject LocationService  LocationService
@inject NavigationManager NavigationManager


@if (location == null || pets.Count == 0)
{
    <p>Loading</p>
}
else
{
<div class="max-w-md mx-auto rounded overflow-hidden shadow-lg my-4 margin-4 ">
    <img class="w-full" src="https://s.marketwatch.com/public/resources/images/MW-HS874_DogHea_ZH_20191008121436.jpg" alt="Sunset in the mountains">
    <div class="px-4 py-3">
        <div class="font-bold text-xl mb-2">Name here</div>
        <p class="text-grey-darker text-base">
            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatibus quia, nulla! Maiores et perferendis eaque, exercitationem praesentium nihil.
        </p><br>
        <p>Birthday 14/12/2018</p>
 @animal
 @location.Latitude
        @location.Longitude
    </div>
    <div class="px-6 py-4">
        <div class="mb-6 text-center">
            <button class="w-full px-4 py-2 font-bold text-white bg-blue-500 rounded-lg shadow-lg hover:bg-blue-700 hover:bg-blue hover:text-white border border-blue text-blue" type="button">
                Like
            </button>
            <br><br>
            <button class="w-full px-4 py-2 font-bold text-red bg-blue-500 rounded-lg shadow-lg hover:bg-red-700 hover:bg-red hover:text-white border border-red text-red" type="button">
                Ignore
            </button>
        </div>
    </div>
</div>
}

@code
{
    [Parameter] public string Category{get;set;}
    private string apiUrl = "https://localhost:7000/api/pets/";
    Location location;
    Animal animal;
    string status;
    MemoryStream fileData = null;
    IFileListEntry file;
    string string64;
    List<GetPetResponse> pets = new List<GetPetResponse>();


    protected override async Task OnInitializedAsync()
    {
        location = await LocationService.GetLocationAsync();

        Animal.TryParse<Animal>(Category, out animal);
        await Http.GetJsonAsync<string>($"{apiUrl}{animal}/{location.Latitude}/{location.Longitude}/100");
    }
    public enum Animal
    {
        Dog,
        Cat,
        Fish,
        Turtle,
        Rabbit,
        Parrot,
        Hamster
    }
    public enum Gen
    {
        Male,
        Female
    }
    public class Pet
    {
        public string Id { get; set; }
        public string Name { get; set; }
      //  public int Species { get; set; }
     //   public int Genre { get; set; }
        public string Username { get; set; }
        public string Description { get; set; }
       // public object Location { get; set; }
        public DateTime BirthDate { get; set; }
       // public string LocationId { get; set; }
        public string ImagePath { get; set; }
    }

    public class LocationResponse
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }
    public class MainResponse
    {
        public List<GetPetResponse> pets { get; set; }
    }
    public class GetPetResponse
    {
        public Pet pet { get; set; }
        public LocationResponse location { get; set; }
    }
}