@page "/messages"
@layout MainLayout
@inject HttpClient Http
@inject LocationService  LocationService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@using Microsoft.AspNetCore.Components.Web
@using System.IO
@using System.Timers;
@using System
@implements IDisposable

@if (users.Count == 0)
{
    <p>Loading</p>
}
else
{

    <div class="mb-12 flex rounded w-4/5 h-local-custom m-local-custom shadow-lg" style="overflow-anchor: none;height: calc(100vh - 180px)">

        <div class="bg-grey-darkest text-purple-lighter w-15">

            <div class="py-8 px-4 mb-3 font-sans">Direct Messages</div>


            <!--

            <div class="flex items-center mb-3 px-4">
                <img src="http://www.garten-und-pflasterbau.de/Images/no-user-img.png" class="w-10 h-10 rounded mr-3" />
                <span class="text-purple-lightest">Adam Bishop</span>
            </div>

            <div class="flex items-center px-4 mb-6">
                <img src="https://avatars2.githubusercontent.com/u/343407?s=460&v=4" class="w-10 h-10 rounded mr-3" />
                <span class="text-purple-lightest">killgt</span>
                <img src="new_message.png" class="mx-4 w-auto h-10" />
            </div>
                -->
            @foreach (var user in users)
            {

                <div style="cursor: pointer;" @onclick="(() => LoadMessages(user.user, user.imageData))" class="flex items-center mb-3 px-4">
                    <img src="data:image/jpg;base64, @user.imageData" class="w-10 h-10 rounded mr-3" />
                    <span class="text-purple-lightest">@user.user.FirstName @user.user.LastName</span>
                </div>
            }
        </div>

        <!-- Chat content -->
        <div class="pt-8 w-full flex flex-col ">
            <!-- Top bar -->
            <div class="pt-8 w-full flex flex-col overflow-x-scroll">
                @if (sender != null && messages != null)
                {
                    @foreach (var message in messages)
                    {
                        if (message.SenderId == sender.Id)
                        {
                            <div class="px-8 -py-2 m-1 ">
                                <!-- A message -->
                                <div class="flex items-start mt-8 mb-8">
                                    <img src="data:image/jpg;base64, @senderImage" class="w-10 h-10 rounded mr-3" />
                                    <div class="flex flex-col">
                                        <div class="flex items-end">
                                            <span class="font-bold text-md mr-2 font-sans">@sender.UserName</span>
                                            <span class="text-grey text-xs font-light">@message.CreatedAt</span>
                                        </div>
                                        <p class="font-light text-md text-grey-darkest pt-1">@message.Text</p>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="px-8 -py-2 m-1" style="background-color:#b7ddf0;">
                                <!-- A message -->
                                <div class="flex items-start mt-8 mb-8">
                                    <img src="data:image/jpg;base64, @profile.imageData" class="w-10 h-10 rounded mr-3" />
                                    <div class="flex flex-col">
                                        <div class="flex items-end">
                                            <span class="font-bold text-md mr-2 font-sans">Me</span>
                                            <span class="text-grey text-xs font-light">@message.CreatedAt</span>
                                        </div>
                                        <p class="font-light text-md text-grey-darkest pt-1">@message.Text</p>
                                    </div>
                                </div>
                            </div>
                        }


                    }
                }




                <div style="overflow-anchor: auto; height: 1px"></div>
            </div>
            <div class="flex m-6 rounded-lg border-2 border-grey overflow-hidden h-auto">
                <span @onclick="SendMessage" class="text-3xl text-grey px-3 border-r-2 border-grey content-center pt-auto ">+</span>
                <form @onsubmit="SendMessage" class="w-full overflow-x-scroll" style="height: 5em;">
                    <input type="text" @bind="TextMessage" class="w-full px-4 pt-auto overflow-x-scroll " style="height: 3em;" placeholder="Message"></input>
                </form>
            </div>
        </div>
    </div>



}

@code
{
    private string apiUrl = "https://localhost:7000/api/messages/";
    private string apiUrlUsers = "https://localhost:7000/api/users/";

    public string TextMessage;
    List<Message> messages;
    string personId;
    List<string> receivers = new List<string>();
    List<UserResponse> users = new List<UserResponse>();
    User sender;
    string senderImage;
    string username;
    UserResponse profile;
    System.Timers.Timer t;
    async void SendMessage()
    {

        MessageRequest messageRequest = new MessageRequest()
        {
            SenderId = profile.user.Id,
            ReceiverId = sender.Id,
            Text = TextMessage
        };
        this.TextMessage = "";
        var response = await Http.PostJsonAsync<MessageResponse>(apiUrl, messageRequest);
        await LoadMessages(sender, senderImage);
        StateHasChanged();
    }
    private async Task GetProfile(string id)
    {
        profile = await Http.GetJsonAsync<UserResponse>($"{apiUrlUsers}{id}");
    }

    private async Task LoadMessages(User sender, string image)
    {
        this.sender = sender;
        this.senderImage = image;
        var msgs = await Http.GetJsonAsync<Message[]>($"{apiUrl}{personId}/{sender.Id}");
        messages = msgs.ToList();
    }
    protected override async Task OnInitializedAsync()
    {
        username = await LocalStorage.GetItemAsync<string>("username");
        personId = await LocalStorage.GetItemAsync<string>("id");
        await GetProfile(personId);
        var response = await Http.GetJsonAsync<Message[]>($"{apiUrl}receiverid/{personId}");
        var messages = response.ToList();
        messages.OrderBy(x => x.CreatedAt).GroupBy(x => x.SenderId);

        foreach (var message in messages)
        {
            if (receivers.Contains(message.SenderId))
                continue;
            receivers.Add(message.SenderId);
            try
            {
                var resp = await Http.GetJsonAsync<UserResponse>($"{apiUrlUsers}{message.SenderId}");

                if (!resp.succes)
                    continue;
                users.Add(resp);
            }
            catch
            {

            }


        }
        users.Reverse();
        sender = users[0].user;
        senderImage = users[0].imageData;
        await LoadMessages(sender, senderImage);
        await InvokeAsync(StateHasChanged);

        t = new System.Timers.Timer();
        t.Elapsed += async (s, e) =>
        {
            await LoadMessages(sender, senderImage);
            await InvokeAsync(StateHasChanged);
        };
        t.Interval = 10000;
        t.Start();

    }
    void IDisposable.Dispose()
    {
        t.Stop();

        // Unsubscribe from the event when our component is disposed

    }
    public class Message
    {
        public string Id { get; set; }
        public string SenderId { get; set; }
        public string ReceiverId { get; set; }
        public string Text { get; set; }
        public DateTime CreatedAt { get; set; }
    }
    public class Receiver
    {
        public string Id { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    public class User
    {
        public string Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string UserName { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
        public string ImagePath { get; set; }
    }

    public class UserResponse
    {
        public bool succes { get; set; }
        public User user { get; set; }
        public string imageData { get; set; }
    }
}